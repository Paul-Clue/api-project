{"id":"node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js","dependencies":[{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js.map","includedInParent":true,"mtime":1711168689439},{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/src/ErrorsAreMissesCache.ts","includedInParent":true,"mtime":1711168689631},{"name":"/Users/paulc1/Desktop/Projects/Api Project/package.json","includedInParent":true,"mtime":1711177666650},{"name":"/Users/paulc1/Desktop/Projects/Api Project/.babelrc","includedInParent":true,"mtime":1711167415382},{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/package.json","includedInParent":true,"mtime":1711168689309}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrorsAreMissesCache = void 0;\nclass ErrorsAreMissesCache {\n    constructor(cache, logger) {\n        this.cache = cache;\n        this.logger = logger;\n    }\n    async get(key) {\n        try {\n            return await this.cache.get(key);\n        }\n        catch (e) {\n            if (this.logger) {\n                if (e instanceof Error) {\n                    this.logger.error(e.message);\n                }\n                else {\n                    this.logger.error(e);\n                }\n            }\n            return undefined;\n        }\n    }\n    async set(key, value, opts) {\n        return this.cache.set(key, value, opts);\n    }\n    async delete(key) {\n        return this.cache.delete(key);\n    }\n}\nexports.ErrorsAreMissesCache = ErrorsAreMissesCache;\n"},"sourceMaps":{"js":{"version":3,"file":"ErrorsAreMissesCache.js","sourceRoot":"","sources":["../src/ErrorsAreMissesCache.ts"],"names":[],"mappings":";;;AAQA,MAAa,oBAAoB;IAC/B,YAAoB,KAAuB,EAAU,MAAe;QAAhD,UAAK,GAAL,KAAK,CAAkB;QAAU,WAAM,GAAN,MAAM,CAAS;IAAG,CAAC;IAExE,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAClC;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,YAAY,KAAK,EAAE;oBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;iBAC9B;qBAAM;oBACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACtB;aACF;YACD,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,KAAQ,EAAE,IAAuB;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;CACF;AAzBD,oDAyBC","sourcesContent":["import type { KeyValueCache } from \"./KeyValueCache\";\nimport type { Logger } from \"@apollo/utils.logger\";\n\n/**\n * This cache wraps a KeyValueCache and returns undefined (a cache miss) for any\n * errors thrown by the underlying cache. You can also provide a logger to\n * capture these errors rather than just swallow them.\n */\nexport class ErrorsAreMissesCache<V = string> implements KeyValueCache<V> {\n  constructor(private cache: KeyValueCache<V>, private logger?: Logger) {}\n\n  async get(key: string): Promise<V | undefined> {\n    try {\n      return await this.cache.get(key);\n    } catch (e) {\n      if (this.logger) {\n        if (e instanceof Error) {\n          this.logger.error(e.message);\n        } else {\n          this.logger.error(e);\n        }\n      }\n      return undefined;\n    }\n  }\n\n  async set(key: string, value: V, opts?: { ttl?: number }): Promise<void> {\n    return this.cache.set(key, value, opts);\n  }\n\n  async delete(key: string): Promise<boolean | void> {\n    return this.cache.delete(key);\n  }\n}\n"]}},"error":null,"hash":"23b47c720d6118cab56227447bbc51ce","cacheData":{"env":{}}}