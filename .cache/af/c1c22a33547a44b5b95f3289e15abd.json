{"id":"node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js","dependencies":[{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js.map","includedInParent":true,"mtime":1711168689587},{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/src/PrefixingKeyValueCache.ts","includedInParent":true,"mtime":1711168689713},{"name":"/Users/paulc1/Desktop/Projects/Api Project/package.json","includedInParent":true,"mtime":1711177666650},{"name":"/Users/paulc1/Desktop/Projects/Api Project/.babelrc","includedInParent":true,"mtime":1711167415382},{"name":"/Users/paulc1/Desktop/Projects/Api Project/node_modules/@apollo/utils.keyvaluecache/package.json","includedInParent":true,"mtime":1711168689309}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PrefixingKeyValueCache = void 0;\nclass PrefixingKeyValueCache {\n    constructor(wrapped, prefix) {\n        this.wrapped = wrapped;\n        this.prefix = prefix;\n    }\n    get(key) {\n        return this.wrapped.get(this.prefix + key);\n    }\n    set(key, value, options) {\n        return this.wrapped.set(this.prefix + key, value, options);\n    }\n    delete(key) {\n        return this.wrapped.delete(this.prefix + key);\n    }\n}\nexports.PrefixingKeyValueCache = PrefixingKeyValueCache;\n"},"sourceMaps":{"js":{"version":3,"file":"PrefixingKeyValueCache.js","sourceRoot":"","sources":["../src/PrefixingKeyValueCache.ts"],"names":[],"mappings":";;;AAYA,MAAa,sBAAsB;IACjC,YAAoB,OAAyB,EAAU,MAAc;QAAjD,YAAO,GAAP,OAAO,CAAkB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEzE,GAAG,CAAC,GAAW;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;IAC7C,CAAC;IACD,GAAG,CAAC,GAAW,EAAE,KAAQ,EAAE,OAAiC;QAC1D,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAC;IACD,MAAM,CAAC,GAAW;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;IAChD,CAAC;CACF;AAZD,wDAYC","sourcesContent":["import type { KeyValueCache, KeyValueCacheSetOptions } from \".\";\n\n// PrefixingKeyValueCache wraps another cache and adds a prefix to all keys used\n// by all operations. This allows multiple features to share the same underlying\n// cache without conflicts.\n//\n// Note that PrefixingKeyValueCache explicitly does not implement methods like\n// flush() that aren't part of KeyValueCache, even though most KeyValueCache\n// implementations also have a flush() method. Most implementations of flush()\n// send a simple command that wipes the entire backend cache system, which\n// wouldn't support \"only wipe the part of the cache with this prefix\", so\n// trying to provide a flush() method here could be confusingly dangerous.\nexport class PrefixingKeyValueCache<V = string> implements KeyValueCache<V> {\n  constructor(private wrapped: KeyValueCache<V>, private prefix: string) {}\n\n  get(key: string) {\n    return this.wrapped.get(this.prefix + key);\n  }\n  set(key: string, value: V, options?: KeyValueCacheSetOptions) {\n    return this.wrapped.set(this.prefix + key, value, options);\n  }\n  delete(key: string) {\n    return this.wrapped.delete(this.prefix + key);\n  }\n}\n"]}},"error":null,"hash":"4b06c51dff5df0b397f0bd2a77f1b487","cacheData":{"env":{}}}